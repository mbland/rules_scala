"""Bazel module definition for rules_scala"""

module(
    name = "rules_scala", version = "6.6.1", repo_name = "io_bazel_rules_scala"
)

http_archive = use_repo_rule(
    "@bazel_tools//tools/build_defs/repo:http.bzl",
    "http_archive",
)
local_repository = use_repo_rule(
    "@bazel_tools//tools/build_defs/repo:local.bzl",
    "local_repository",
)

SCALA_VERSION = "2.13.14"
SCALA_VERSIONS = [SCALA_VERSION]

# `v.replace()` mimics `version_suffix()` from `//scala:scala_cross_version.bzl`.
SCALA_VERSION_SUFFIXES = ["_" + v.replace(".", "_") for v in SCALA_VERSIONS]

bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "rules_cc", version = "0.0.9")
bazel_dep(name = "rules_java", version = "7.11.1")
bazel_dep(name = "rules_proto", version = "6.0.2")

scala_config = use_extension("//scala/extensions:config.bzl", "scala_config")
scala_config.settings(
    scala_version = SCALA_VERSION,
    scala_versions = SCALA_VERSIONS,
)
use_repo(
    scala_config,
    "io_bazel_rules_scala_config",
)

# These repos come from //third_party/repositories/scala_*.bzl.
artifacts = [
    #"com_geirsson_metaconfig_core",
    #"com_geirsson_metaconfig_typesafe_config",
    #"com_google_protobuf_protobuf_java",
    #"com_lihaoyi_fansi",
    #"com_lihaoyi_fastparse",
    #"com_lihaoyi_geny",
    #"com_lihaoyi_pprint",
    #"com_lihaoyi_sourcecode",
    #"com_thesamet_scalapb_lenses",
    #"com_thesamet_scalapb_scalapb_runtime",
    #"com_typesafe_config",
    "io_bazel_rules_scala_net_sf_jopt_simple_jopt_simple",
    "io_bazel_rules_scala_org_apache_commons_commons_math3",
    "io_bazel_rules_scala_org_openjdk_jmh_jmh_core",
    "io_bazel_rules_scala_org_openjdk_jmh_jmh_generator_asm",
    "io_bazel_rules_scala_org_openjdk_jmh_jmh_generator_reflection",
    "io_bazel_rules_scala_org_ows2_asm_asm",
    "io_bazel_rules_scala_scala_parallel_collections",
    #"org_scala_lang_modules_scala_collection_compat",
    #"org_scala_lang_scalap",
    #"org_scalameta_common",
    #"org_scalameta_fastparse",
    #"org_scalameta_fastparse_utils",
    #"org_scalameta_parsers",
    #"org_scalameta_scalafmt_core",
    #"org_scalameta_scalameta",
    #"org_scalameta_semanticdb_scalac",
    #"org_scalameta_trees",
    #"org_typelevel_paiges_core",
    "scala_proto_rules_disruptor",
    "scala_proto_rules_google_instrumentation",
    "scala_proto_rules_grpc_api",
    "scala_proto_rules_grpc_context",
    "scala_proto_rules_grpc_core",
    "scala_proto_rules_grpc_netty",
    "scala_proto_rules_grpc_protobuf",
    "scala_proto_rules_grpc_stub",
    "scala_proto_rules_guava",
    "scala_proto_rules_netty_buffer",
    "scala_proto_rules_netty_codec",
    "scala_proto_rules_netty_codec_http",
    "scala_proto_rules_netty_codec_http2",
    "scala_proto_rules_netty_codec_socks",
    "scala_proto_rules_netty_common",
    "scala_proto_rules_netty_handler",
    "scala_proto_rules_netty_handler_proxy",
    "scala_proto_rules_netty_resolver",
    "scala_proto_rules_netty_transport",
    "scala_proto_rules_opencensus_api",
    "scala_proto_rules_opencensus_contrib_grpc_metrics",
    "scala_proto_rules_opencensus_impl",
    "scala_proto_rules_opencensus_impl_core",
    "scala_proto_rules_perfmark_api",
    "scala_proto_rules_protoc_bridge",
    "scala_proto_rules_scalapb_fastparse",
    "scala_proto_rules_scalapb_lenses",
    "scala_proto_rules_scalapb_plugin",
    "scala_proto_rules_scalapb_runtime",
    "scala_proto_rules_scalapb_runtime_grpc",
]

junit_artifacts = [
    "io_bazel_rules_scala_junit_junit",
    "io_bazel_rules_scala_org_hamcrest_hamcrest_core",
]

specs2_artifacts = [
    "io_bazel_rules_scala_org_specs2_specs2_common",
    "io_bazel_rules_scala_org_specs2_specs2_core",
    "io_bazel_rules_scala_org_specs2_specs2_fp",
    "io_bazel_rules_scala_org_specs2_specs2_matcher",
    "io_bazel_rules_scala_org_specs2_specs2_junit",
]

twitter_scrooge_artifacts = [
    "libthrift",
    "io_bazel_rules_scala_scrooge_core",
    "io_bazel_rules_scala_scrooge_generator",
    "io_bazel_rules_scala_util_core",
    "io_bazel_rules_scala_util_logging",
    "io_bazel_rules_scala_guava",
    "io_bazel_rules_scala_javax_annotation_api",
    "io_bazel_rules_scala_mustache",
    "io_bazel_rules_scala_scopt",
]

testonly_artifacts = [
    # test adding a scala jar:
    "com_twitter__scalding_date",
    # test of strict deps (scalac plugin UT + E2E)
    "com_google_guava_guava_21_0_with_file",
    "com_github_jnr_jffi_native",
    "org_apache_commons_commons_lang_3_5",
    "com_google_guava_guava_21_0",
    # test of import external
    # scala maven import external decodes maven artifacts to its parts
    # (group id, artifact id, packaging, version and classifier). To make sure
    # the decoding and then the download url composition are working the artifact example
    # must contain all the different parts and sha256s so the downloaded content will be
    # validated against it
    "org_springframework_spring_core",
    "org_springframework_spring_tx",
    "org_typelevel_kind_projector",
    # For testing that we don't include sources jars to the classpath
    "org_typelevel__cats_core",
]

dev_toolchains = [
    "//testing:testing_toolchain",
]

scala_deps = use_extension("//scala/extensions:deps.bzl", "scala_deps")
scala_deps.toolchains()

use_repo(scala_deps, "io_bazel_rules_scala_toolchains")
register_toolchains(
    # We must register the scalatest toolchains first, as the junit and specs2
    # toolchains have an ordering dependency on it for now:
    #
    # ERROR: .../rules_scala~/testing/toolchain/BUILD:14:23:
    #   in testing_toolchain_deps rule
    #   @@rules_scala~//testing/toolchain:scalatest_classpath:                                                                                                                 
    #   [ ...snip... ]
    #   File ".../rules_scala~/scala/private/toolchain_deps/toolchain_deps.bzl",
    #     line 13, column 9, in _lookup_provider_by_id                                                                                                                                
    # Error in fail: scalatest_classpath requires mapping of scalatest_classpath
    #   provider id on the toolchain
    #   @io_bazel_rules_scala//testing/toolchain:testing_toolchain_type                                 
    # ERROR: .../rules_scala~/testing/toolchain/BUILD:14:23: Analysis of target
    #   '@@rules_scala~//testing/toolchain:scalatest_classpath' failed
    "@io_bazel_rules_scala_toolchains//scalatest:all",
    "@io_bazel_rules_scala_toolchains//...:all",
)

#common_artifacts = ()
#[
#    [use_repo(scala_deps, repo + suffix) for repo in common_artifacts]
#    for suffix in SCALA_VERSION_SUFFIXES
#]

# Dev dependencies

bazel_dep(
    name = "protobuf",
    version = "28.2",
    repo_name = "com_google_protobuf",
    dev_dependency = True,
)

bazel_dep(
    name = "bazel_ci_rules",
    version = "1.0.0",
    repo_name = "bazelci_rules",
    dev_dependency = True,
)

register_toolchains(
    "//jmh:jmh_toolchain",
    "//scala_proto:default_deps_toolchain",
    "//twitter_scrooge:scrooge_toolchain",
    "//test/proto:scalapb_toolchain",
    "//testing:junit_toolchain",
    "//testing:specs2_junit_toolchain",
    dev_dependency = True,
)

bazel_dep(
    name = "rules_go",
    version = "0.50.1",
    repo_name = "io_bazel_rules_go",
    dev_dependency = True,
)

go_version = "1.23.1"
go_sdk = use_extension(
    "@io_bazel_rules_go//go:extensions.bzl",
    "go_sdk",
    dev_dependency = True,
)
go_sdk.download(
    name = "go_sdk",
    version = go_version,
)
use_repo(go_sdk, "go_sdk")

#dev_artifacts = (
#    twitter_scrooge_artifacts
#)
#
#[
#    (
#        [use_repo(scala_deps, repo + suffix) for repo in dev_artifacts],
#        [
#            register_toolchains(toolchain + suffix, dev_dependency = True)
#            for toolchain in dev_toolchains
#        ],
#    )
#    for suffix in SCALA_VERSION_SUFFIXES
#]

bazel_dep(name = "rules_python", version = "0.35.0", dev_dependency = True)

_build_tools_release = "7.3.1"
bazel_dep(
    name = "buildtools",
    repo_name = "com_github_bazelbuild_buildtools",
    dev_dependency = True,
)
archive_override(
    module_name = "buildtools",
    integrity = "sha256-BRlRwQ/4rd608QvjsM9HSzBLLM1nXyzHaDzdkBAyDKk=",
    strip_prefix = "buildtools-%s" % _build_tools_release,
    urls = [
        "https://github.com/bazelbuild/buildtools/archive/v%s.tar.gz" % _build_tools_release,
    ],
)

local_repository(
    name = "example_external_workspace",
    path = "third_party/test/example_external_workspace",
)
