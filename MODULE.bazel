"""Bazel module definition for rules_scala"""

module(
    name = "rules_scala", version = "6.6.1", repo_name = "io_bazel_rules_scala"
)

http_archive = use_repo_rule(
    "@bazel_tools//tools/build_defs/repo:http.bzl",
    "http_archive",
)
local_repository = use_repo_rule(
    "@bazel_tools//tools/build_defs/repo:local.bzl",
    "local_repository",
)
new_local_repository = use_repo_rule(
    "@bazel_tools//tools/build_defs/repo:local.bzl",
    "new_local_repository",
)

SCALA_VERSION = "2.13.14"
SCALA_VERSIONS = [SCALA_VERSION]

bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "rules_cc", version = "0.0.9")
bazel_dep(name = "rules_java", version = "7.11.1")
bazel_dep(name = "rules_proto", version = "6.0.2")

# For now, users are revlocked to protobuf-21.7 or protobuf-25.5 (which doesn't
# build under Bazel 6).
bazel_dep(name = "protobuf", repo_name = "com_google_protobuf")
single_version_override(module_name = "protobuf", version = "21.7")

scala_config = use_extension("//scala/extensions:config.bzl", "scala_config")
scala_config.settings(
    scala_version = SCALA_VERSION,
    scala_versions = SCALA_VERSIONS,
)
use_repo(scala_config, "io_bazel_rules_scala_config")

scala_deps = use_extension("//scala/extensions:deps.bzl", "scala_deps")
scala_deps.toolchains()

# Register our testing toolchain first, only when building our repo.
register_toolchains("//test/proto:scalapb_toolchain", dev_dependency = True)

use_repo(scala_deps, "io_bazel_rules_scala_toolchains")
register_toolchains(
    "@io_bazel_rules_scala_toolchains//...:all",
)

# Dev dependencies

dev_deps = use_extension(
    "//scala/extensions:deps.bzl",
    "scala_deps",
    dev_dependency = True,
)
dev_deps.toolchains(
    #scalatest = True,
    #junit = True,
    #specs2 = True,
    twitter_scrooge = True,
    jmh = True,
    scala_proto = True,
    #scala_proto_enable_all_options = True,
    testing = True,
    scalafmt = True,
)

# See //testing/private:repositories.bzl for notes on some of these repos.
use_repo(
    dev_deps,
    "com_github_jnr_jffi_native",
    "com_google_guava_guava_21_0",
    "com_google_guava_guava_21_0_with_file",
    "com_twitter__scalding_date",
    "org_apache_commons_commons_lang_3_5",
    "org_springframework_spring_core",
    "org_springframework_spring_tx",
    "org_typelevel__cats_core",
    "org_typelevel_kind_projector",
    "scala_proto_rules_protoc_bridge",
    "scalafmt_default",
)

[
    use_repo(dev_deps, dep + "_" + SCALA_VERSION.replace(".", "_"))
    for dep in [
        "io_bazel_rules_scala_junit_junit",
    ]
]

test_deps = use_extension(
    "//scala/private/extensions:test_deps.bzl",
    "test_deps",
    dev_dependency = True,
)

use_repo(
    test_deps,
    "example_external_workspace",
    "proto_cross_repo_boundary",
    "remote_jdk8_linux",
    "remote_jdk8_macos",
    "remote_jdk8_windows",
    "remotejdk21_linux",
    "remotejdk21_linux_toolchain_config_repo",
    "remotejdk21_macos",
    "remotejdk21_macos_toolchain_config_repo",
    "remotejdk21_win",
    "remotejdk21_win_toolchain_config_repo",
    "test_new_local_repo",
)

register_toolchains(
    "//test/toolchains:java21_toolchain_definition",
    "@remotejdk21_linux_toolchain_config_repo//:all",
    "@remotejdk21_macos_toolchain_config_repo//:all",
    "@remotejdk21_win_toolchain_config_repo//:all",
    dev_dependency = True,
)

bazel_dep(
    name = "platforms",
    version = "0.0.10",
    dev_dependency = True,
)

bazel_dep(
    name = "bazel_ci_rules",
    version = "1.0.0",
    repo_name = "bazelci_rules",
    dev_dependency = True,
)

bazel_dep(
    name = "rules_go",
    version = "0.50.1",
    repo_name = "io_bazel_rules_go",
    dev_dependency = True,
)

go_version = "1.23.1"
go_sdk = use_extension(
    "@io_bazel_rules_go//go:extensions.bzl",
    "go_sdk",
    dev_dependency = True,
)
go_sdk.download(
    name = "go_sdk",
    version = go_version,
)
use_repo(go_sdk, "go_sdk")

bazel_dep(name = "rules_python", version = "0.35.0", dev_dependency = True)

_build_tools_release = "7.3.1"
bazel_dep(
    name = "buildtools",
    repo_name = "com_github_bazelbuild_buildtools",
    dev_dependency = True,
)
archive_override(
    module_name = "buildtools",
    integrity = "sha256-BRlRwQ/4rd608QvjsM9HSzBLLM1nXyzHaDzdkBAyDKk=",
    strip_prefix = "buildtools-%s" % _build_tools_release,
    urls = [
        "https://github.com/bazelbuild/buildtools/archive/v%s.tar.gz" % _build_tools_release,
    ],
)
