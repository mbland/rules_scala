"""Bazel module definition for rules_scala"""

module(
    name = "rules_scala", version = "6.6.1", repo_name = "io_bazel_rules_scala"
)

http_archive = use_repo_rule(
    "@bazel_tools//tools/build_defs/repo:http.bzl",
    "http_archive",
)
local_repository = use_repo_rule(
    "@bazel_tools//tools/build_defs/repo:local.bzl",
    "local_repository",
)

SCALA_VERSION = "2.13.14"
SCALA_VERSIONS = [SCALA_VERSION]

bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "rules_cc", version = "0.0.9")
bazel_dep(name = "rules_java", version = "7.11.1")
bazel_dep(name = "rules_proto", version = "6.0.2")

scala_config = use_extension("//scala/extensions:config.bzl", "scala_config")
scala_config.settings(
    scala_version = SCALA_VERSION,
    scala_versions = SCALA_VERSIONS,
)
use_repo(scala_config, "io_bazel_rules_scala_config")

scala_deps = use_extension("//scala/extensions:deps.bzl", "scala_deps")
scala_deps.toolchains()

use_repo(scala_deps, "io_bazel_rules_scala_toolchains")
register_toolchains(
    # We must register the scalatest toolchains first, as the junit and specs2
    # toolchains have an ordering dependency on it for now:
    #
    # ERROR: .../rules_scala~/testing/toolchain/BUILD:14:23:
    #   in testing_toolchain_deps rule
    #   @@rules_scala~//testing/toolchain:scalatest_classpath:                                                                                                                 
    #   [ ...snip... ]
    #   File ".../rules_scala~/scala/private/toolchain_deps/toolchain_deps.bzl",
    #     line 13, column 9, in _lookup_provider_by_id                                                                                                                                
    # Error in fail: scalatest_classpath requires mapping of scalatest_classpath
    #   provider id on the toolchain
    #   @io_bazel_rules_scala//testing/toolchain:testing_toolchain_type                                 
    # ERROR: .../rules_scala~/testing/toolchain/BUILD:14:23: Analysis of target
    #   '@@rules_scala~//testing/toolchain:scalatest_classpath' failed
    "@io_bazel_rules_scala_toolchains//scalatest:all",
    "@io_bazel_rules_scala_toolchains//...:all",
)

# Dev dependencies

dev_deps = use_extension(
    "//scala/extensions:deps.bzl",
    "scala_deps",
    dev_dependency = True,
)
dev_deps.toolchains(
    junit = True,
    specs2 = True,
    twitter_scrooge = True,
)

bazel_dep(
    name = "protobuf",
    version = "28.2",
    repo_name = "com_google_protobuf",
    dev_dependency = True,
)

bazel_dep(
    name = "bazel_ci_rules",
    version = "1.0.0",
    repo_name = "bazelci_rules",
    dev_dependency = True,
)

bazel_dep(
    name = "rules_go",
    version = "0.50.1",
    repo_name = "io_bazel_rules_go",
    dev_dependency = True,
)

go_version = "1.23.1"
go_sdk = use_extension(
    "@io_bazel_rules_go//go:extensions.bzl",
    "go_sdk",
    dev_dependency = True,
)
go_sdk.download(
    name = "go_sdk",
    version = go_version,
)
use_repo(go_sdk, "go_sdk")

bazel_dep(name = "rules_python", version = "0.35.0", dev_dependency = True)

_build_tools_release = "7.3.1"
bazel_dep(
    name = "buildtools",
    repo_name = "com_github_bazelbuild_buildtools",
    dev_dependency = True,
)
archive_override(
    module_name = "buildtools",
    integrity = "sha256-BRlRwQ/4rd608QvjsM9HSzBLLM1nXyzHaDzdkBAyDKk=",
    strip_prefix = "buildtools-%s" % _build_tools_release,
    urls = [
        "https://github.com/bazelbuild/buildtools/archive/v%s.tar.gz" % _build_tools_release,
    ],
)

local_repository(
    name = "example_external_workspace",
    path = "third_party/test/example_external_workspace",
)
