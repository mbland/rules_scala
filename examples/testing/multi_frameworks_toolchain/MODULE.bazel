"""Bazel module ./test/shell/test_examples.sh tests"""

module(name = "multi_frameworks_toolchain")

SCALA_VERSION = "2.12.20"

VERSION_SUFFIX = "_" + SCALA_VERSION.replace(".", "_")

bazel_dep(name = "rules_scala")
local_path_override(
    module_name = "rules_scala",
    path = "../../..",
)

scala_config = use_extension(
    "@rules_scala//scala/extensions:config.bzl",
    "scala_config",
)
scala_config.settings(
    scala_version = SCALA_VERSION,
)
use_repo(scala_config, "rules_scala_config")

scala_deps = use_extension(
    "@rules_scala//scala/extensions:deps.bzl",
    "scala_deps",
)
scala_deps.settings(
    fetch_sources = True,
)

scala_deps.toolchains(
    junit = True,
    scalatest = True,
    specs2 = True,
)

# Under normal circumstances, the above `scala_deps.toolchains()` registration
# would be all you need. rules_scala will set up and register the toolchains
# automatically.
#
# However, we need to import the repos used by the
# `setup_scala_testing_toolchain()` example in the `BUILD` file. These repos
# are versioned by Scala version, so we have to append the `VERSION_SUFFIX`.
[
    use_repo(scala_deps, "io_bazel_rules_scala_" + dep + VERSION_SUFFIX)
    for dep in [
        "junit_junit",
        "org_hamcrest_hamcrest_core",
        "scalactic",
        "scalatest",
        "scalatest_compatible",
        "scalatest_core",
        "scalatest_featurespec",
        "scalatest_flatspec",
        "scalatest_freespec",
        "scalatest_funspec",
        "scalatest_funsuite",
        "scalatest_matchers_core",
        "scalatest_mustmatchers",
        "scalatest_shouldmatchers",
        "org_specs2_specs2_common",
        "org_specs2_specs2_core",
        "org_specs2_specs2_fp",
        "org_specs2_specs2_matcher",
        "org_specs2_specs2_junit",
    ]
]

register_toolchains("//:testing_toolchain")
