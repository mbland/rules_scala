"""Utilities for working with Bazel modules"""

def apparent_repo_name(repo_name):
    """Return the apparent repository name.

    This is a nop if repo_name is already an apparent repo name.

    Splits the last component off of canonical repo names to produce the
    expected repo name. Or else we get output like:

        scala_import(
            name = "_main~scala_deps~io_bazel_rules_scala_scala_compiler",
            jars = ["scala-compiler-2.12.18.jar"],
        )

    resulting in errors like:

      ERROR: .../_main~_repo_rules~io_bazel_rules_scala/scala/BUILD:
      no such target
        '@@_main~scala_deps~io_bazel_rules_scala_scala_compiler
          //:io_bazel_rules_scala_scala_compiler':
      target 'io_bazel_rules_scala_scala_compiler' not declared in
      package '' defined by
        .../_main~scala_deps~io_bazel_rules_scala_scala_compiler/BUILD
      and referenced by '@@_main~_repo_rules~io_bazel_rules_scala
        //scala:default_toolchain_scala_compile_classpath_provider'

    However, we can't rely on the specific canonical repository name format:

    > Repos generated by extensions have canonical names in the form of
    > `module_repo_canonical_name~extension_name~repo_name`. For extensions
    > hosted in the root module, the `module_repo_canonical_name` part is
    > replaced with the string `_main`. Note that the canonical name format is
    > not an API you should depend on â€” it's subject to change at any time.
    >
    > - https://bazel.build/external/extension#repository_names_and_visibility

    The change to no longer encode module versions in canonical repo names in
    Bazel 7.1.0 is a recent example of Bazel maintainers altering the format:

    - https://github.com/bazelbuild/bazel/pull/21316

    And the maintainers are about to replace `~` as the delimiter due to build
    performance issues on Windows:

    - https://github.com/bazelbuild/bazel/issues/22865

    This function assumes the only valid `repo_name` characters are letters,
    numbers, '_', '-', and '.'. It finds the last character not in this set, and
    returns the contents of `name` following this character. This is valid so
    long as this condition holds (modulo the change from `~` to `+`):

    - https://github.com/bazelbuild/bazel/blob/7.3.1/src/main/java/com/google/devtools/build/lib/cmdline/RepositoryName.java#L159-L162

    Args:
        repo_name: (presumably canonical) repository name
    Returns:
        the apparent repository name
    """
    for i in range(len(repo_name)-1, -1, -1):
        c = repo_name[i]
        if not (c.isalnum() or c in "_-."):
            return repo_name[i+1:]
    return repo_name
