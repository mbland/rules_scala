workspace(name = "test_dt_patches")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

local_repository(
    name = "io_bazel_rules_scala",
    path = "../..",
)

load("@io_bazel_rules_scala//scala:deps.bzl", "rules_scala_dependencies")

rules_scala_dependencies()

load("@rules_java//java:repositories.bzl", "rules_java_dependencies", "rules_java_toolchains")

rules_java_dependencies()

rules_java_toolchains()

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")

bazel_skylib_workspace()

http_archive(
    name = "rules_python",
    sha256 = "ca2671529884e3ecb5b79d6a5608c7373a82078c3553b1fa53206e6b9dddab34",
    strip_prefix = "rules_python-0.38.0",
    url = "https://github.com/bazelbuild/rules_python/releases/download/0.38.0/rules_python-0.38.0.tar.gz",
)

load("@rules_python//python:repositories.bzl", "py_repositories")

py_repositories()

load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")

protobuf_deps()

load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies")

rules_proto_dependencies()

load("@rules_proto//proto:setup.bzl", "rules_proto_setup")

rules_proto_setup()

load("@rules_proto//proto:toolchains.bzl", "rules_proto_toolchains")

rules_proto_toolchains()

load("@io_bazel_rules_scala//:scala_config.bzl", "scala_config")

scala_config(enable_compiler_dependency_tracking = True)

load("@io_bazel_rules_scala//scala:scala.bzl", "scala_toolchains")
load(
    "@io_bazel_rules_scala//scala:scala_cross_version.bzl",
    "default_maven_server_urls",
)
load(
    "@io_bazel_rules_scala//scala:scala_maven_import_external.bzl",
    "scala_maven_import_external",
)
load("@io_bazel_rules_scala_config//:config.bzl", "SCALA_VERSION")

scala_maven_import_external(
    name = "scala_library",
    artifact = "org.scala-lang:scala-library:%s" % SCALA_VERSION if SCALA_VERSION.startswith("2.") else "org.scala-lang:scala3-library_3:%s" % SCALA_VERSION,
    licenses = ["notice"],
    server_urls = default_maven_server_urls(),
)

scala_maven_import_external(
    name = "scala_compiler",
    artifact = "org.scala-lang:scala-compiler:%s" % SCALA_VERSION if SCALA_VERSION.startswith("2.") else "org.scala-lang:scala3-compiler_3:%s" % SCALA_VERSION,
    licenses = ["notice"],
    server_urls = default_maven_server_urls(),
)

# Scala 2 only
scala_maven_import_external(
    name = "scala_reflect",
    artifact = "org.scala-lang:scala-reflect:%s" % SCALA_VERSION,
    licenses = ["notice"],
    server_urls = default_maven_server_urls(),
)

# Scala 3 only
scala_maven_import_external(
    name = "scala3_interfaces",
    artifact = "org.scala-lang:scala3-interfaces:%s" % SCALA_VERSION,
    licenses = ["notice"],
    server_urls = default_maven_server_urls(),
)

scala_maven_import_external(
    name = "scala2_library",
    artifact = "org.scala-lang:scala-library:2.13.15",
    licenses = ["notice"],
    server_urls = default_maven_server_urls(),
)

scala_maven_import_external(
    name = "tasty_core",
    artifact = "org.scala-lang:tasty-core_3:%s" % SCALA_VERSION,
    licenses = ["notice"],
    server_urls = default_maven_server_urls(),
)

scala_maven_import_external(
    name = "scala_asm",
    artifact = "org.scala-lang.modules:scala-asm:9.7.0-scala-2",
    licenses = ["notice"],
    server_urls = default_maven_server_urls(),
)

scala_maven_import_external(
    name = "sbt_compiler_interface",
    artifact = "org.scala-sbt:compiler-interface:1.9.6",
    licenses = ["notice"],
    server_urls = default_maven_server_urls(),
)

scala_toolchains(
    fetch_sources = True,
    validate_scala_version = False,
)

register_toolchains(
    ":dt_scala_toolchain",
    "@io_bazel_rules_scala_toolchains//...:all",
)
